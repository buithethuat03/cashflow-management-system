apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      service: kafka
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka
    spec:
      securityContext:
        fsGroup: 1000
      enableServiceLinks: false
      containers:
        - name: kafka
          imagePullPolicy: IfNotPresent
          image: bitnami/kafka:latest
          ports:
            - containerPort: 29092
              name: internal
            - containerPort: 9092
              name: external
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://kafka:29092,LISTENER_EXTERNAL://kafka-external:9092"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://:29092,LISTENER_EXTERNAL://:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/kafka/
              name: kafka-data
      restartPolicy: Always
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc

---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: kafka
  name: kafka-service
spec:
  selector:
    service: kafka
  ports:
    - name: external
      port: 9092
      targetPort: 9092
